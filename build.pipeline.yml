trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildDate: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  buildCounter: $[counter(variables['buildDate'], 1)]
  buildVersion: '$(buildDate).$(buildCounter)'  
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  nugetServiceConnection: 'NuGet Service Connection'
  dockerRegistryServiceConnection: 'Azure Container Registry'
  dockerfilePath: './Dockerfile'
  imageName: 'microservice-av-scanner'

name: $(buildDate).$(buildCounter)

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: Docker@2
  displayName: 'Build and Push Docker Image'
  inputs:
    command: 'buildAndPush'
    containerRegistry: '$(dockerRegistryServiceConnection)'
    repository: '$(imageName)'
    dockerfile: '$(dockerfilePath)'
    buildContext: '$(Build.SourcesDirectory)'
    tags: |
      $(buildVersion)
      latest

# Add the script to define the output variable here
- script: |
    echo "##vso[task.setvariable variable=buildVersion;isOutput=true]$(buildVersion)"
  displayName: 'Set Build Version Output Variable'
# Publish output variables as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'outputVariables'
    publishLocation: 'pipeline'
  
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: 'AvScanner.Api/AvScanner.Api.csproj'
    feedsToUse: 'select'
    vstsFeed: 'kangmike'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: 'AvScanner.Api/AvScanner.Api.csproj'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: 'AvScanner.Api.Tests/AvScanner.Api.Tests.csproj'
    configuration: '$(buildConfiguration)'
    nobuild: true
    arguments: '--collect "Code coverage"'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    projects: 'AvScanner.Api/AvScanner.Api.csproj'
    configuration: '$(buildConfiguration)'
    publishWebProjects: true
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'


 